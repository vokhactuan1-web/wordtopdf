"""
Giao di·ªán Tkinter cho ·ª©ng d·ª•ng converter
"""
import threading
from pathlib import Path
from typing import List, Callable, Optional
import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext

from ..logging.logger_setup import get_logger
from ..io.file_handler import FileHandler

logger = get_logger(__name__)


class ConverterUI:
    """Giao di·ªán chung cho converter"""
    
    def __init__(self, root: tk.Tk, title: str, file_types: List[tuple], 
                 patterns: List[str], converter_func: Callable):
        """
        Args:
            root: Tkinter root window
            title: Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
            file_types: Danh s√°ch file types cho dialog
            patterns: Danh s√°ch pattern cho file search
            converter_func: H√†m chuy·ªÉn ƒë·ªïi (input_path, output_path) -> Path
        """
        self.root = root
        self.title = title
        self.file_types = file_types
        self.patterns = patterns
        self.converter_func = converter_func
        
        self.file_list: List[Path] = []
        
        # FIX: T·∫°o valid_extensions ƒë√∫ng c√°ch - lo·∫°i b·ªè d·∫•u * v√† ch·ªâ l·∫•y extension
        self.valid_extensions = []
        for _, pattern in file_types:
            # Split pattern v√† x·ª≠ l√Ω t·ª´ng extension
            for ext in pattern.split():
                # Lo·∫°i b·ªè d·∫•u * v√† th√™m v√†o list
                clean_ext = ext.replace('*', '').lower()
                if clean_ext and clean_ext not in self.valid_extensions:
                    self.valid_extensions.append(clean_ext)
        
        logger.info(f"Valid extensions: {self.valid_extensions}")
        
        self._setup_window()
        self._create_widgets()
        self._log_system_info()
    
    def _setup_window(self):
        """Thi·∫øt l·∫≠p c·ª≠a s·ªï"""
        self.root.title(self.title)
        self.root.geometry("900x700")
        
        # Icon (n·∫øu c√≥)
        try:
            # self.root.iconbitmap('icon.ico')
            pass
        except:
            pass
    
    def _create_widgets(self):
        """T·∫°o c√°c widget"""
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Title
        title_label = ttk.Label(
            main_frame,
            text=f"üìÑ {self.title}",
            font=('Arial', 18, 'bold')
        )
        title_label.grid(row=0, column=0, columnspan=3, pady=10)
        
        subtitle = ttk.Label(
            main_frame,
            text="‚ú® H·ªó tr·ª£ ho√†n to√†n ti·∫øng Vi·ªát - T·ª± ƒë·ªông t·∫£i font Unicode",
            font=('Arial', 9, 'italic'),
            foreground='#27AE60'
        )
        subtitle.grid(row=1, column=0, columnspan=3, pady=(0, 15))
        
        # Drop zone
        self._create_drop_zone(main_frame)
        
        # Buttons
        self._create_buttons(main_frame)
        
        # File list
        self._create_file_list(main_frame)
        
        # Convert button
        self._create_convert_button(main_frame)
        
        # Progress bar
        self.progress = ttk.Progressbar(main_frame, mode='indeterminate')
        self.progress.grid(row=6, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=5)
        
        # Log area
        self._create_log_area(main_frame)
        
        # Configure grid weights
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(0, weight=1)
        main_frame.rowconfigure(4, weight=1)
        main_frame.rowconfigure(7, weight=2)
        
        # Setup drag & drop
        self._setup_drag_drop()
    
    def _create_drop_zone(self, parent):
        """T·∫°o v√πng drop file"""
        drop_frame = ttk.LabelFrame(parent, text="Th√™m file", padding="25")
        drop_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=10)
        
        self.drop_label = ttk.Label(
            drop_frame,
            text=f"üñ±Ô∏è K√©o th·∫£ file v√†o ƒë√¢y\nho·∫∑c nh·∫•n n√∫t b√™n d∆∞·ªõi",
            font=('Arial', 11),
            justify=tk.CENTER
        )
        self.drop_label.pack(expand=True, fill=tk.BOTH, pady=15)
    
    def _create_buttons(self, parent):
        """T·∫°o c√°c n√∫t ch·ª©c nƒÉng"""
        btn_frame = ttk.Frame(parent)
        btn_frame.grid(row=3, column=0, columnspan=3, pady=10)
        
        ttk.Button(
            btn_frame,
            text="üìÇ Ch·ªçn File",
            command=self.select_files,
            width=15
        ).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(
            btn_frame,
            text="üìÅ Ch·ªçn Th∆∞ M·ª•c",
            command=self.select_folder,
            width=15
        ).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(
            btn_frame,
            text="üóëÔ∏è X√≥a",
            command=self.clear_list,
            width=10
        ).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(
            btn_frame,
            text="üì• M·ªü Downloads",
            command=self.open_downloads,
            width=15
        ).pack(side=tk.LEFT, padx=5)
    
    def _create_file_list(self, parent):
        """T·∫°o danh s√°ch file"""
        list_frame = ttk.LabelFrame(parent, text="üìã Danh s√°ch file", padding="10")
        list_frame.grid(row=4, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=10)
        
        scroll = ttk.Scrollbar(list_frame)
        scroll.pack(side=tk.RIGHT, fill=tk.Y)
        
        self.file_listbox = tk.Listbox(
            list_frame,
            height=8,
            yscrollcommand=scroll.set,
            font=('Consolas', 9)
        )
        self.file_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scroll.config(command=self.file_listbox.yview)
    
    def _create_convert_button(self, parent):
        """T·∫°o n√∫t chuy·ªÉn ƒë·ªïi"""
        self.convert_btn = ttk.Button(
            parent,
            text="üîÑ CHUY·ªÇN ƒê·ªîI SANG PDF",
            command=self.convert_files
        )
        self.convert_btn.grid(row=5, column=0, columnspan=3, pady=15, ipadx=20, ipady=5)
    
    def _create_log_area(self, parent):
        """T·∫°o v√πng log"""
        log_frame = ttk.LabelFrame(parent, text="üìù Log", padding="10")
        log_frame.grid(row=7, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=10)
        
        self.log_text = scrolledtext.ScrolledText(
            log_frame,
            height=10,
            state='disabled',
            font=('Consolas', 9),
            wrap=tk.WORD
        )
        self.log_text.pack(fill=tk.BOTH, expand=True)
    
    def _setup_drag_drop(self):
        """Thi·∫øt l·∫≠p drag & drop"""
        try:
            from tkinterdnd2 import DND_FILES
            self.drop_label.drop_target_register(DND_FILES)
            self.drop_label.dnd_bind('<<Drop>>', self.on_drop)
            logger.info("Drag & drop ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t")
        except ImportError:
            logger.warning("tkinterdnd2 ch∆∞a c√†i ƒë·∫∑t - kh√¥ng c√≥ drag & drop")
    
    def _log_system_info(self):
        """Ghi th√¥ng tin h·ªá th·ªëng"""
        self.log("=" * 60)
        self.log(f"üìä {self.title.upper()}")
        self.log("=" * 60)
        self.log("")
        self.log("üöÄ S·∫µn s√†ng chuy·ªÉn ƒë·ªïi!")
        self.log("=" * 60)
        self.log("")
    
    def log(self, msg: str):
        """Ghi log"""
        self.log_text.config(state='normal')
        self.log_text.insert(tk.END, f"{msg}\n")
        self.log_text.see(tk.END)
        self.log_text.config(state='disabled')
        logger.info(msg)
    
    def on_drop(self, event):
        """X·ª≠ l√Ω drop file"""
        files = self.root.tk.splitlist(event.data)
        for f in files:
            path = Path(f)
            if FileHandler.validate_file(path, self.valid_extensions):
                self.add_file(path)
    
    def select_files(self):
        """Ch·ªçn file"""
        files = FileHandler.select_files(self.file_types, "Ch·ªçn file")
        for f in files:
            self.add_file(f)
    
    def select_folder(self):
        """Ch·ªçn th∆∞ m·ª•c"""
        folder = FileHandler.select_folder()
        if folder:
            files = FileHandler.get_files_from_folder(folder, self.patterns)
            for f in files:
                self.add_file(f)
    
    def add_file(self, path: Path):
        """Th√™m file v√†o danh s√°ch"""
        if path not in self.file_list:
            if FileHandler.validate_file(path, self.valid_extensions):
                self.file_list.append(path)
                self.file_listbox.insert(tk.END, str(path))
                self.log(f"‚ûï {path.name}")
            else:
                self.log(f"‚ö†Ô∏è File kh√¥ng h·ª£p l·ªá: {path.name}")
                self.log(f"   Extension: {path.suffix} | Cho ph√©p: {self.valid_extensions}")
    
    def clear_list(self):
        """X√≥a danh s√°ch"""
        self.file_list.clear()
        self.file_listbox.delete(0, tk.END)
        self.log("üóëÔ∏è ƒê√£ x√≥a danh s√°ch\n")
    
    def open_downloads(self):
        """M·ªü th∆∞ m·ª•c Downloads"""
        downloads = FileHandler.get_downloads_folder()
        FileHandler.open_folder(downloads)
        self.log(f"üì• ƒê√£ m·ªü: {downloads}")
    
    def convert_files(self):
        """Chuy·ªÉn ƒë·ªïi c√°c file"""
        if not self.file_list:
            messagebox.showwarning("C·∫£nh b√°o", "Ch∆∞a c√≥ file n√†o!")
            return
        
        self.convert_btn.config(state='disabled')
        self.progress.start()
        
        threading.Thread(target=self._convert_thread, daemon=True).start()
    
    def _convert_thread(self):
        """Thread chuy·ªÉn ƒë·ªïi"""
        success = error = 0
        
        self.log("\n" + "=" * 60)
        self.log(f"üöÄ B·∫ÆT ƒê·∫¶U CHUY·ªÇN ƒê·ªîI {len(self.file_list)} FILE")
        self.log("=" * 60 + "\n")
        
        for file_path in self.file_list:
            try:
                self.log(f"‚è≥ ƒêang x·ª≠ l√Ω: {file_path.name}")
                output = file_path.with_suffix('.pdf')
                
                # G·ªçi h√†m converter
                result = self.converter_func(file_path, output)
                
                self.log(f"   ‚úÖ ‚Üí {result.name}\n")
                success += 1
            except Exception as e:
                self.log(f"   ‚ùå L·ªñI: {str(e)}\n")
                logger.error(f"L·ªói chuy·ªÉn ƒë·ªïi {file_path}: {e}", exc_info=True)
                error += 1
        
        self.progress.stop()
        self.convert_btn.config(state='normal')
        
        self.log("=" * 60)
        self.log(f"üéâ K·∫æT QU·∫¢: ‚úÖ {success} | ‚ùå {error}")
        self.log("=" * 60 + "\n")
        
        messagebox.showinfo(
            "Ho√†n t·∫•t",
            f"‚úÖ Th√†nh c√¥ng: {success}\n‚ùå L·ªói: {error}"
        )


def create_app(title: str, file_types: List[tuple], patterns: List[str],
               converter_func: Callable) -> ConverterUI:
    """
    T·∫°o ·ª©ng d·ª•ng converter
    
    Args:
        title: Ti√™u ƒë·ªÅ
        file_types: Danh s√°ch file types
        patterns: Danh s√°ch pattern
        converter_func: H√†m chuy·ªÉn ƒë·ªïi
        
    Returns:
        ConverterUI: UI instance
    """
    try:
        from tkinterdnd2 import TkinterDnD
        root = TkinterDnD.Tk()
    except ImportError:
        root = tk.Tk()
        logger.warning("tkinterdnd2 ch∆∞a c√†i ƒë·∫∑t - kh√¥ng c√≥ drag & drop")
    
    app = ConverterUI(root, title, file_types, patterns, converter_func)
    return app